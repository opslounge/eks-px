apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: px-eksctl-parsons
  region: ap-southeast-1
  version: "1.17"
managedNodeGroups:
  - name: storage-nodes
    instanceType: m4.xlarge
    minSize: 3
    maxSize: 3
    volumeSize: 10
    amiFamily: AmazonLinux2
    labels: {role: worker, "portworx.io/node-type": "storage"}
    tags:
      nodegroup-role: worker
  #    shutdown: y
   #   type: host    
 #   ssh:  
  #    allow: true
   #   publicKeyPath: ~/pureuser.pem
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
        albIngress: true
        cloudWatch: true
  - name: storageless-nodes
    instanceType: m4.xlarge
    minSize: 3
    maxSize: 6
    desiredCapacity: 3
    volumeSize: 10
    amiFamily: AmazonLinux2
    labels: {role: worker}
    tags:
      nodegroup-role: worker-storageless
   #   shutdown: y
  #    type: host
#    ssh:
 #     allow: true
  #    publicKeyPath: ~/.ssh/aws-vm.pub
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy 
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
        albIngress: true
        cloudWatch: true
availabilityZones: [ 'ap-southeast-1a', 'ap-southeast-1b', 'ap-southeast-1c' ]

